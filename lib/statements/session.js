var CaliperSession = require('caliperjs/src/entities/session/session');

var ACTIVITY_TYPES = require('../activitytypes');
var StatementUtil = require('../util');
var VERBS = require('../verbs');

/**
 * Generate and store a learning activity statement for a user logging into a system
 *
 * @param  {Object}         config                            @see config
 * @param  {Object}         statement                         @see statement
 * @param  {String}         statement.metadata.id             The id of the session generated by logging in
 * @param  {Function}       [callback]                        @see callback
 */
var login = module.exports.login = function (config, statement, callback) {
  // Input validation
  var validationError = StatementUtil.validate(config, statement, {
    'id': {
      'type': 'string',
      'required': true
    }
  });
  if (validationError) {
    return callback(validationError);
  }

  StatementUtil.processStatement(config, statement, {
    'verb': VERBS.LOGGED_IN,
    'XAPI': {
      'uuid': [statement.metadata.id],
      'object': {
        'id': config.platform.url
      }
    },
    'CALIPER': {
      'object': StatementUtil.Caliper.generateEdApp(config.platform),
      'generated': StatementUtil.Caliper.generateEntity(CaliperSession, {
        'id': statement.metadata.id,
        'startedAtTime': StatementUtil.Caliper.generateDate(statement.timestamp),
        'actor': StatementUtil.Caliper.generatePerson(statement.actor)
      })
    }
  }, callback);
};

/**
 * Generate and store a learning activity statement for a user logging out of a system
 *
 * @param  {Object}         config                            @see config
 * @param  {Object}         statement                         @see statement
 * @param  {Function}       [callback]                        @see callback
 */
var logout = module.exports.logout = function (config, statement, callback) {
  // Input validation
  var validationError = StatementUtil.validate(config, statement);
  if (validationError) {
    return callback(validationError);
  }

  StatementUtil.processStatement(config, statement, {
    'verb': VERBS.LOGGED_OUT,
    'XAPI': {
      'uuid': [statement.timestamp, StatementUtil.XAPI.getUserId(statement.actor)],
      'object': {
        'id': config.platform.url
      }
    },
    'CALIPER': {
      'object': StatementUtil.Caliper.generateEdApp(config.platform)
    }
  }, callback);
};

/**
 * Generate and store a learning activity statement for a user navigating to a course
 *
 * @param  {Object}         config                            @see config
 * @param  {Object}         statement                         @see statement
 * @param  {String}         statement.metadata.id             The URL of the course
 * @param  {String}         statement.metadata.name           The name of the course
 * @param  {String}         [statement.metadata.description]  The description of the course
 * @param  {Function}       [callback]                        @see callback
 */
var navigateToCourse = module.exports.navigateToCourse = function (config, statement, callback) {
  // Input validation
  var validationError = StatementUtil.validate(config, statement, {
    'id': {
      'type': 'uri',
      'required': true
    },
    'name': {
      'type': 'string',
      'required': true
    },
    'description': {
      'type': 'string',
      'required': false
    }
  });
  if (validationError) {
    return callback(validationError);
  }

  StatementUtil.processStatement(config, statement, {
    'verb': VERBS.ACCESSED,
    'XAPI': {
      'uuid': [statement.timestamp, statement.metadata.id],
      'object': {
        'id': statement.metadata.id,
        'type': ACTIVITY_TYPES.COURSE.id,
        'name': statement.metadata.name,
        'description': statement.metadata.description
      }
    },
    'CALIPER': {
      // TODO
    }
  }, callback);
};

/**
 * Generate and store a learning activity statement for a user navigating to a page
 *
 * @param  {Object}         config                            @see config
 * @param  {Object}         statement                         @see statement
 * @param  {String}         statement.metadata.id             The URL of the page
 * @param  {String}         [statement.metadata.name]         The name of the page
 * @param  {Function}       [callback]                        @see callback
 */
var navigateToPage = module.exports.navigateToPage = function (config, statement, callback) {
  // Input validation
  var validationError = StatementUtil.validate(config, statement, {
    'id': {
      'type': 'uri',
      'required': true
    },
    'name': {
      'type': 'string',
      'required': false
    }
  });
  if (validationError) {
    return callback(validationError);
  }

  StatementUtil.processStatement(config, statement, {
    'verb': VERBS.ACCESSED,
    'XAPI': {
      'uuid': [statement.timestamp, statement.metadata.id],
      'object': {
        'id': statement.metadata.id,
        'type': ACTIVITY_TYPES.PAGE.id,
        'name': statement.metadata.name
      }
    },
    'CALIPER': {
      // TODO
    }
  }, callback);
};
